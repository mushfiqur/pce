int main(){
	int num_vars = 1;
	int tot_sim_steps = 2;
	
	BasisPolySet basis_poly(num_vars, 4);
	basis_poly.print_polys();
	std::cout << "--------------\n" << std::endl;
	
	// Define Netlist
	input_node u = input_node(basis_poly, tot_sim_steps, 1, "u");
	
	const_node c1 = const_node(0.05, basis_poly.set_size, tot_sim_steps, "c1");
	const_node c2 = const_node(0.25, basis_poly.set_size, tot_sim_steps, "c2");
	const_node c3 = const_node(0.6, basis_poly.set_size, tot_sim_steps, "c3");

	mult_node a = mult_node(basis_poly, tot_sim_steps, "a");
	delay_node b = delay_node(basis_poly.set_size, tot_sim_steps, "b");
	mult_node c = mult_node(basis_poly, tot_sim_steps, "c");
	add_node d = add_node(basis_poly.set_size, tot_sim_steps, "d");
	add_node y = add_node(basis_poly.set_size, tot_sim_steps, "y");
	delay_node y_d = delay_node(basis_poly.set_size, tot_sim_steps, "y_d");
	mult_node y_d_c = mult_node(basis_poly, tot_sim_steps, "y_d_c");
	mult_node e = mult_node(basis_poly, tot_sim_steps, "e");

	// Connect/Init Netlist
	u.init(PCE);
	for(int i = 0; i < u.pce_coeffs.size(); i++){
		u.pce_coeffs[i][0] = 0.01;
		u.pce_coeffs[i][1] = 0.02;
		u.pce_coeffs[i][2] = 0.01;
		u.pce_coeffs[i][3] = 0.01;
		u.pce_coeffs[i][4] = 0.005;
	}

	a.init(&u, &c1, PCE);
	b.init(&u, PCE);
	c.init(&b, &c2, PCE);
	d.init(&c, &e, PCE);
	y.init(&d, &y_d_c, PCE);
	y_d.init(&y, PCE);
	y_d_c.init(&y_d, &c3, PCE);
	e.init(&a, &y_d, PCE);

	// Run Sim
	process_node(&u, tot_sim_steps);

	//// PRINTING ////
	y.print(basis_poly);
	std::cout << "------------" << std::endl;
	y.print_pwr(basis_poly);
	// std::cout << std::endl;
	return 0;
}
