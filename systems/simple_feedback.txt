int main(){	
	// Define Netlist
	BasisPolySet basis_poly = BasisPolySet(UNIFORM);

	input_node b(&basis_poly, 1, "x");
	const_node c1(&basis_poly, "c1");
	
	delay_node out_d(&basis_poly, "y_d");
	mult_node out_dc(&basis_poly, "y_dc");
	add_node out(&basis_poly, "out");

	// Connect/Init Netlist
	c1.init(0.5);

	out_d.init(&out);
	out_dc.init(&c1, &out_d);
	out.init(&out_dc, &b);

	// Generate Basis Polynomials
	basis_poly.generate_polys(3);

	// Set up Simulator
	Simulator sim = Simulator();
	sim.add_basis_poly_set(basis_poly);

	sim.add_node(b);
	sim.add_node(c1);
	sim.add_node(out_d);
	sim.add_node(out_dc);
	sim.add_node(out);

	// Set bitwidths
	sim.set_bitwidth(b, 32);
	sim.set_bitwidth(out_dc, 32);

	sim.set_output_node(out);

	// Run Sim
	int tot_sim_steps = 10;

	sim.set_sim_params(PCE, tot_sim_steps);
	sim.run_sim(&b);
	
	
	std::cout << "\n(" << sim.curr_sol_noise_pwr << ") { \n";
	for(int i = 0; i < sim.curr_solution.size() - 1; i++){
		std::cout << "\t" << sim.curr_solution[i].n->label << ": " << sim.curr_solution[i].bitwidth << ", \n";
	}
	std::cout << "\t" << sim.curr_solution[sim.curr_solution.size() - 1].n->label << ": " << sim.curr_solution[sim.curr_solution.size() - 1].bitwidth << std::endl;
	std::cout << "}\n";


	return 0;
}