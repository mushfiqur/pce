int main(){
	BasisPolySet basis_poly = BasisPolySet(UNIFORM);
	
	// Define Netlist
	input_node I(&basis_poly, "I");
	delay_node I_d_1(&basis_poly, "I_d_1");
	delay_node I_d_2(&basis_poly, "I_d_2");

	input_node Q(&basis_poly, "Q");
	delay_node Q_d_1(&basis_poly, "Q_d_1");
	delay_node Q_d_2(&basis_poly, "Q_d_2");

	sub_node I_bar(&basis_poly, "i_bar");
	sub_node Q_bar(&basis_poly, "i_bar");

	mult_node a(&basis_poly, "a");
	mult_node b(&basis_poly, "b");

	sub_node out(&basis_poly, "f");


	// Connect/Init Netlist
	I.add_dist(UNIFORM, 3);
	Q.add_dist(UNIFORM, 3);
	
	I_d_1.init(&I);
	I_d_2.init(&I_d_1);
	Q_d_1.init(&Q);
	Q_d_2.init(&Q_d_1);

	I_bar.init(&I, &I_d_2);
	Q_bar.init(&Q, &Q_d_2);

	a.init(&I_d_1, &Q_bar);
	b.init(&Q_d_1, &I_bar);

	out.init(&a, &b);

	// Generate Basis Polynomials
	basis_poly.generate_polys(2);

	//// Set up Simulator
	Simulator sim = Simulator();
	sim.add_basis_poly_set(basis_poly);

	// Add nodes to simulator
	sim.add_node(I);
	sim.add_node(I_d_1);
	sim.add_node(I_d_2);
	sim.add_node(Q);
	sim.add_node(Q_d_1);
	sim.add_node(Q_d_2);
	sim.add_node(I_bar);
	sim.add_node(Q_bar);
	sim.add_node(a);
	sim.add_node(b);
	sim.add_node(out);
	
	// Set bitwidths
	sim.set_bitwidth(I,       6);
	// sim.set_bitwidth(I_d_1,   32);
	// sim.set_bitwidth(I_d_2,   32);
	sim.set_bitwidth(Q,       7);
	// sim.set_bitwidth(Q_d_1,   32);
	// sim.set_bitwidth(Q_d_2,   32);
	sim.set_bitwidth(a,       7);
	sim.set_bitwidth(b,       7);

	// Set output node
	sim.set_output_node(out);

	// Run Sim
	int tot_sim_steps = 4;

	
	sim.set_sim_params(PCE, tot_sim_steps);
	// sim.run_sim_anneal(&I, 100.0, 10000);
	sim.run_sim(&I);

	sim.add_plot_node(out);
	sim.plot();

	// std::cout << "\n(" << sim.curr_sol_noise_pwr << ") { \n";
	// for(int i = 0; i < sim.curr_solution.size() - 1; i++){
	// 	std::cout << "\t" << sim.curr_solution[i].n->label << ": " << sim.curr_solution[i].bitwidth << ", \n";
	// }
	// std::cout << "\t" << sim.curr_solution[sim.curr_solution.size() - 1].n->label << ": " << sim.curr_solution[sim.curr_solution.size() - 1].bitwidth << std::endl;
	// std::cout << "}\n";

	return 0;
}